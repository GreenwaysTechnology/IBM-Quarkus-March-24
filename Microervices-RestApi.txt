				Microservices
.....................................................................................
What are microservices?


Microservices - also known as the microservice architecture - is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably - a necessity for competing and winning in today’s world.

Let’s look at why its important to deliver software rapidly, frequently, reliably and sustainably.

Before MicroServices: 
 Monolothic ; single development,deployment.....

Microservices are collection of many design patterns.

....................................................................................
			 Micro services implementation
.....................................................................................
Microservices just archtecture, we can implement any language,any framework.

Java implementation:
1.Spring cloud
2.Quarkus
3.Vertx
etc....
.....................................................................................
.....................................................................................
			Quarkus as Microservice implmentation
.....................................................................................
Quarkus is framework which implements the most of the microservice design patterns
via Ecplise Microprofile specification.

Micro Profile specification is  extension of "Microservice" design patterns.


Domain Modeling
................
ProductCatelog Management
Inventory Management
OrderManagement
DeliveryManagement

Application Architecture

ProductCataglog
  ->Service

What is service?

  Service is mini application.
  Service is sub domain in application 
  For eg in Ecommerce domain "ProductCaaglog" ,"Cusotmer Management","Order Management"

How to implement service?

  Service can be implemented as a java maven project...
  Service has apis

API: Application programming interface..
 Which exposes biz logic 
 Returns data , recevies data

Service API Design:

1.local api
  apis are exposed within objects, called by other objects
2.remote api
  apis are exposed within objects, called by other objects/programs via networks

Remote apis: (RPI)

1.webservices
   soap api /rest api/graphql api
2.RPC
   TCP api
   Grpc apis
3.MOM -Event Driven Microservices
  Using kafka,Rabbitmq

..................................................................................
			RestFull WebService Implementation
..................................................................................
         	  Microservice-HTTP Based Microservice
  	  RESTFull Web Service using JAX-RS  Spec (Jakarta RESTful Web Services)
		      using RESTEasy Framework
.....................................................................................

Jakarta RESTful Web Services is spec of JEE , implementation is RestEasy Framework..

In Quarkus RestEasy has been modified for building non blocking apps


 			 QuarkusApp
			      |
	             Quarkus RestEasy Module
			      |
		         RestEasy Framwork
			     |
		   Jarkarta RestFull WebService

RESTEasy:

  RESTEasy is a JBoss / Red Hat project that provides various frameworks to help you build RESTful Web Services and RESTful Java applications. It is an implementation of the Jakarta RESTful Web Services, an Eclipse Foundation specification that provides a Java API for RESTful Web Services over the HTTP protocol.

Moreover, RESTEasy also implements the MicroProfile REST Client specification API

Quarkus team uses RESTEasy framework for building MicroService's REST API Design.

Traditional RESTEasy apps are deployed on "Jboss,Apach Tomcat" like web containers.
.....................................................................................
			  Types of RESTFull Web services 

1.Reactive web service - Highly Recommended
2.Non Reactive web service - Not recommended

How to identify the reactive and non reactive?

via maven dependencies.

Reactive Version
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>

Non Reactive Version
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy</artifactId>
    </dependency>

Both dependency cant be added in one single project , either reactive or non reactive.
.....................................................................................
		 REST API development

Quarkus is based on JEE standards and MicroProfile standards

Quarkus rest api based on JAX-RS specification - Jakarta RESTful Web Services.

Quarkus implements RESTEasy Framework which is based on Jakarta WS.

RestEasy is based on Blocking and non blocking arch.

Quarkus by default adds Reactive(nonblocking) dependency.

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>

..................

Getting started with rest api development:

1.create project
quarkus create app code-with-quarkus-rest
Looking for the newly published extensions in registry.quarkus.io
-----------

applying codestarts...
>> java
>> maven
>> quarkus
>> config-properties
>> dockerfiles
>> maven-wrapper
>> resteasy-reactive-codestart

-----------
[SUCCESS]  quarkus project has been successfully generated in:
--> E:\session\IBM\2023\Oct\Quarkus\code-with-quarkus-rest
-----------
Navigate into this directory and get started: quarkus dev

How to run quarkus app?

via quarkus cli command
via mvn or mvnw script.
.....................................................................................
			  REST API Core concepts
.....................................................................................

Resources:
   Domain Model which expose api which are accessed by clients using urls 

CustomerResource,ProductResource,PaymentResource etc....

RESTEasy is annotation driven based on jakarta spec:

package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello from RESTEasy Reactive";
    }
}
Common Annotations:

@Path - to map url
@GET -  http get
@POST - http post
@PUT -  http put
@DELETE - http delete.
....................................................................................
			 CURD Annotations
....................................................................................

package com.ibm.rest.api;

import jakarta.ws.rs.*;

@Path("customers")
public class CustomerResource {

    //api
    @GET
    public String findAll(){
        return  "FindAll";
    }
    @POST
    public String create(){
        return  "Create";
    }
    @PUT
    public String update(){
        return  "Update";
    }

    @DELETE
    public String remove(){
        return  "Remove";
    }
}
.....................................................................................
			 Sub Resource
.....................................................................................
package com.ibm.rest.api;

import jakarta.ws.rs.*;

@Path("customers")
public class CustomerResource {

    //api
    @GET
    public String findAll(){
        return  "FindAll";
    }

    @GET
    @Path("reviews")
    public String getReviews(){
        return "Reviews";
    }
    @POST
    public String create(){
        return  "Create";
    }
    @PUT
    public String update(){
        return  "Update";
    }

    @DELETE
    public String remove(){
        return  "Remove";
    }
}
....................................................................................
		 How to Pass data to REST API - Input Parameter
....................................................................................
Data can be passed to the End Point.

1.Through url - path parameter,query parameter,matrix parameter
                Matrix parameters are similar to query param, passing more than one 		parameter

2.Through payload
    Sending data part of the http body..

Through url: Parameters - Path Parameters
package com.ibm.rest.api.parameters;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("books")
public class BookResource {
    //path parameter
    //books/1 , /books/2 /books/3
    @GET
    @Path("{Id}")
    public  String findById(@PathParam("Id") Long id){
        return  "Books By Id : " + id;
    }
}

Query Parameters:
 /books?pages=100&unit=2

package com.ibm.rest.api.parameters;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.QueryParam;

@Path("books")
public class BookResource {
    //Query Parameters
    //localhost:8080/books/pages?totalPages=10&unit=3
    @GET
    @Path("pages")
    public String getPages(@QueryParam("totalPages") Long pages, @QueryParam("unit") Long unit) {
        return "Total pages " + pages + " Unit " + unit;
    }
}
.....................................................................................				Default values for Query Params
.....................................................................................
package com.ibm.rest.api.parameters;

import jakarta.ws.rs.*;

@Path("books")
public class BookResource {


    //Query Parameters
    //localhost:8080/books/pages?totalPages=10&unit=3
    @GET
    @Path("pages")
    public String getPages(@QueryParam("totalPages") @DefaultValue("2") Long pages, @QueryParam("unit") @DefaultValue("1") Long unit) {
        return "Total pages " + pages + " Unit " + unit;
    }
}
.....................................................................................
				Matrix Parameters
....................................................................................

GET /books/info;category=story;language=english;author=John
package com.ibm.rest.api.parameters;

import jakarta.ws.rs.*;

@Path("books")
public class BookResource {
    //Matrix parameter
    @GET
    @Path("info")
    public String getBookInfo(@MatrixParam("category")  @DefaultValue("category")     String category, @MatrixParam("lang") @DefaultValue("eng") String lang,     @MatrixParam("author") @DefaultValue("author") String author) {
        return category + lang + author;
    }
}
.....................................................................................
			    Context Object
.....................................................................................

Context Object provides information about "running container" and the application where we have deployed.


@Context

Context Information:
 =>URL Information
 =>Header informations
 =>Request information
 =>ServletRequest information
 =>ServletResponse information
 =>ServletConfig,Context,SecurityContext information
package com.ibm.rest.api.context;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.HttpHeaders;
import jakarta.ws.rs.core.UriInfo;

@Path("context")
public class ContextResource {

    @GET
    public String getUrlInfo(@Context UriInfo uriInfo) {
        var absPath = uriInfo.getAbsolutePath().toString();
        var baseUri = uriInfo.getBaseUri();
        System.out.println(absPath);
        System.out.println(baseUri);
        return "Context Info" + absPath.toString() + " " + baseUri.toString();
    }

    @GET
    @Path("headers")
    public String getHeaderInfo(@Context HttpHeaders httpHeaders) {
        return httpHeaders.getRequestHeaders().toString();
    }
}
....................................................................................
			 How to read Payload
.....................................................................................

Generally data is submitted from client to rest api via some data formats such as json,xml, formdata etc...

How to submit data as Json to rest?


package com.ibm.rest.api.entity;

public class Order {
    private Integer orderId;
    private String orderStauts;
    private Double orderValue;

    public Order() {
    }

    @Override
    public String toString() {
        return "Order{" +
                "orderId=" + orderId +
                ", orderStauts='" + orderStauts + '\'' +
                ", orderValue=" + orderValue +
                '}';
    }

    public Order(Integer orderId, String orderStauts, Double orderValue) {
        this.orderId = orderId;
        this.orderStauts = orderStauts;
        this.orderValue = orderValue;
    }

    public Integer getOrderId() {
        return orderId;
    }

    public void setOrderId(Integer orderId) {
        this.orderId = orderId;
    }

    public String getOrderStauts() {
        return orderStauts;
    }

    public void setOrderStauts(String orderStauts) {
        this.orderStauts = orderStauts;
    }

    public Double getOrderValue() {
        return orderValue;
    }

    public void setOrderValue(Double orderValue) {
        this.orderValue = orderValue;
    }
}
package com.ibm.rest.api.payload;

import com.ibm.rest.api.entity.Order;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;

@Path("orders")
public class OrderResource {

    //
    @POST
    public String create(Order order) {
        System.out.println(order);
        return "saved";
    }
}

Testing:

POST localhost:8080/orders

{
    "orderId": 1,
    "orderStauts": "CREATED",
    "orderValue": 1000,
    "comments": "This product has some discount"
}

The response 

415 Unsupported Media type..

By default Quarkus does not know how to convert JSON into Java Object...This means no json parser...

How to add JSON parser?
.....................................................................................					Extensions
....................................................................................
What is extension?

 extension is , project dependency- jar dependency.

By default, you can have extensions, when we new project.

Think of Quarkus extensions are as your project dependencies.

Extensions configure,boot and integrate a framework or technology into your quarkus application.

They also do all of the heavy lifting of providing the right information to Graalvm For application to compile nativly.

How do you manage extensions?
  Management means - add,removing,list extensions

There are two way to get  extensions?

1.via maven or gradle
2.via cli -quarkus command.


Quarkus\rest\code-with-quarkus-rest>quarkus ext ls
Current Quarkus extensions installed:

? ArtifactId                                         Extension Name
? quarkus-resteasy-reactive                          RESTEasy Reactive

To get more information, append `--full` to your command line.

How to add extension?
 What extension we are going to add?

JSON Parser
G:\IBM\2024\March\Quarkus\rest\code-with-quarkus-rest>quarkus ext add resteasy-reactive-jackson
[SUCCESS]  Extension io.quarkus:quarkus-resteasy-reactive-jackson has been installed

After Add extension:

POST localhost:8080/orders

{
    "orderId": 1,
    "orderStauts": "CREATED",
    "orderValue": 1000,
    "comments": "This product has some discount"
}

Response would be status code 200 and result 

saved
.....................................................................................
			   Responses
.....................................................................................

What can be response?

REST API return any one of the following as type

1.String - plain/text
2.Objects/Collections - application/json , application/xml
3.void - No Return type , only Status - No Content
4.Response - Response Object
5.Reactive Type - Uni or Multi - Non Blocking api is enabled...



1.String - plain/text
package com.ibm.rest.api.payload;

import com.ibm.rest.api.entity.Order;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;

@Path("orders")
public class OrderResource {

    //
    @POST
    public String create(Order order) {
        System.out.println(order);
        return "saved";
    }
}

2.Return Objects and Collection
 In order to return object or collection , we need to convert into json, we have jackson parser, so dont need to add...
package com.ibm.rest.api.payload;

package com.ibm.rest.api.payload;

import com.ibm.rest.api.entity.Order;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;

@Path("orders")
public class OrderResource {


    @Path("single")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Order getSingleOrder() {
        return new Order(1, "Pending", 34.56, "this is nice product");
    }

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public String create(Order order) {
        System.out.println(order);
        return "saved";
    }
}

How to return Collections?
package com.ibm.rest.api.payload;

import com.ibm.rest.api.entity.Order;
import jakarta.ws.rs.*;
import jakarta.ws.rs.core.MediaType;

import java.util.List;

@Path("orders")
public class OrderResource {


    @Path("single")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public Order getSingleOrder() {
        return new Order(1, "Pending", 34.56, "this is nice product");
    }

    @GET
    public List<Order> getOrders() {
        return List.of(
                new Order(1, "PENDING", 1000.45, "Electronics"),
                new Order(2, "CREATED", 444.4, "Electronics"),
                new Order(3, "DISPATCHED", 344.89, "Electronics"),
                new Order(4, "INTRANSIT", 3434.90, "Electronics"),
                new Order(5, "CANCELLED", 1000.45, "Electronics"));
    }

    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    public String create(Order order) {
        System.out.println(order);
        return "saved";
    }


}
.....................................................................................

Assigment -1:

You have to build api
 Course Api
 
courseId:1
courseName:'Quarkus'
duration:40 hrs
startingDate: date
endingDate: date
category: 'java','js','ui','ai',
instructor: 'Subramanian'

Must have mock data -  can be stored into list or map.

1.return all courses
2.return course by id
3.filter courses by category
4.update course information by id
5.remove course by id




















































