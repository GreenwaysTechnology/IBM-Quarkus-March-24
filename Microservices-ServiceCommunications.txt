			Microservice Communications
.....................................................................................

Services are represented by apis.

API are represented in many ways.

1.RPI
 You have applied the Microservice architecture pattern. Services must handle requests from the application’s clients. Furthermore, services must sometimes collaborate to handle those requests. They must use an inter-process communication protocol.

RPI technologies:
1.REST and Graphql
2.gRPC
3.Apache Thrift

2.Messaging
You have applied the Microservice architecture pattern. Services must handle requests from the application’s clients. Furthermore, services often collaborate to handle those requests. Consequently, they must use an inter-process communication protocol.

Use asynchronous messaging for inter-service communication. Services communicating by exchanging messages over messaging channels.

Asynchronous messaging technologies

Apache Kafka
RabbitMQ

RPI - REST To REST Commication
...............................

This type of communication is HTTP based communication.

Quarkus Implementations:

1.MicroProfile Rest client specification- Both reactive and non reactive.

2.Vertx Web Client - By Default Reactive

3.Java 11 HTTPClient -Blocking and Non blocking way...
....................................................................................
			MicroProfile Rest client specification
....................................................................................

In Service Communications, there would be two actors

1.Caller
  Who is calling the other services

2.Callee
   Who is called by the other services

Flow:
  
 User/App------http-------->Caller------->Callee

G:\IBM\2024\March\Quarkus\communication\rpi>quarkus create app code-with-quarkus-caller
Looking for the newly published extensions in registry.quarkus.io
-----------

applying codestarts...
>> java
>> maven
>> quarkus
>> config-properties
>> tooling-dockerfiles
>> tooling-maven-wrapper
>> resteasy-reactive-codestart

-----------
[SUCCESS]  quarkus project has been successfully generated in:
--> G:\IBM\2024\March\Quarkus\communication\rpi\code-with-quarkus-caller
-----------
Navigate into this directory and get started: quarkus dev


Callee:

application.properties
quarkus.http.port=9000

Callee Rest api:
package org.acme;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello, I am Callee";
    }
}

application.properties
quarkus.http.port=9000

quarkus dev


The callee app is running in 9000 port, later, we have to use this url for communication

.....................................................................................
				Caller
.....................................................................................

In order to communicate callee, Microprofile Rest client spec offers an interface..

  <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-rest-client-reactive</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-rest-client-reactive-jackson</artifactId>
    </dependency>


1.Write Interface :

package com.ibm.rest.client;

import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

@Path("hello")
@RegisterRestClient
public interface HelloRestClientService {
    //declare callee rest api specification
    @GET
    String sayHello();
}

1.Here we need to declare interface
2.Annotate interface with @RegisterRestClient
3.Annotate Root path @Path("path")
4.Http method apis are mapping inside interface


Step 2: Configuration in application.properties
com.ibm.rest.client.HelloRestClientService/mp-rest/url=http://localhost:9000
com.ibm.rest.client.HelloRestClientService/mp-rest/scope=javax.inject.Singleton

Step 3: Interface injection
package org.acme;

import com.ibm.rest.client.HelloRestClientService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.rest.client.inject.RestClient;

@Path("/welcome")
public class GreetingResource {

    @Inject
    @RestClient
    HelloRestClientService helloRestClientService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return helloRestClientService.sayHello();
    }
}

Testing:
http:localhost:8080/welcome

Now you will able to See, the output of Callee.
....................................................................................
Assigment:

There are two Services

1.Libraray Service - caller
2.Book Service - Callee

User will talk to Libarary service, will access all book information..

Book Service Must have the following apis

1.Return all Books
2.Return book by id
3.Pass Book for save
4.Update Book information
5.Remove Book 

Tech Stack:
1.Reactive Hibernate Orm Panche - Both Reactive version- You can select Active Record or DAO pattern











