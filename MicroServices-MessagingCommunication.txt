			 Microservice Communications


Pattern: Messaging:
...................
You have applied the Microservice architecture pattern. Services must handle requests from the applicationâ€™s clients. Furthermore, services often collaborate to handle those requests. Consequently, they must use an inter-process communication protocol.


Forces
Services often need to collaborate
Synchronous communicate results in tight runtime coupling, both the client and service must be available for the duration of the request

Solution:

 Use asynchronous messaging for inter-service communication. Services communicating by exchanging messages over "messaging channels".

There are numerous examples of asynchronous messaging technologies

Apache Kafka
RabbitMQ
.....................................................................................
			   Event Driven Microservices
....................................................................................

Microservices are going to exchange data over messaging channels async , so those microservices are called as "Event Driven Microservices"

Quarkus and Event Driven Microservices:
........................................

Quarkus offers two implementations

1.Vertx Event Bus
2.SmallRye Reactive Messaging Specification


1.Vertx Event Bus:

AKKA - Actor Model Based.

Actor model is architure model which describes how data can be exchanged among programs we call services using "message oriented and event driven".

Vertx inspired akka with respect to message passing techniques, now we can pass messages using vertx  "Event Bus".

Event Bus:
 -Event bus is object through which we can exchange messages async.
 -Event bus is just like message broker which in memory message broker
 -Event bus uses queue to store messages
 -Event bus communicates via tcp protocal
 -Event bus can exchange any type of data- including json.
 -Event can be used to send and receive messages across the system.


Event Bus is "Vertx" feature, you can use inside Quarkus application.

There is some limitation inside Quarkus, We cant send and received messages across the microservices..
Eg:
  OrderMicroservice cant send message to ProductMicroservice which are two different apps.

But if you have separate vertx apps, you can send and receive messages across the system - Vertx Provides an infrastructure called "vertx Cluster".
Quarkus does not have Vertx Cluster.

...................................................................................
			Quarkus and Event Bus Implementation
...................................................................................

Quarkus allows different beans to interact using asynchronous events, thus promoting loose coupling.

The messages are sent to virtual locations(addresses).

It offeres three different deliver mechansim..

1.point-to-point:
    Send the message, one Consumer receives it.if Serveral Consumers listen to the address, round robin is applied.

2.publish/subscribe:
    Publish a message, all the consumers listening to the address are receving the message;

3.request/reply:
   send the message and expect a response, The receiver can respond to the amessage in async fashion.


Create Project with following dependency:
>quarkus ext add vertx
Looking for the newly published extensions in registry.quarkus.io
[SUCCESS]  Extension io.quarkus:quarkus-vertx has been installed

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-vertx</artifactId>
    </dependency>


Without Event Bus How Resource and Bean Communication is?

package com.ibm.service.communication.eventbus;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GreetingService {

    public String consume(String name) {
        return name.toUpperCase();
    }
}

package org.acme;

import com.ibm.service.communication.eventbus.GreetingService;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;

@Path("/hello")
public class GreetingResource {

    @Inject
    GreetingService greetingService;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return greetingService.consume("Subramanian");
    }
}

Here GreetingResource and Greeting Service is "tightly Coupled"...It synch call...

If you want to make async calls, and loose coupling, now We use event Bus...


package com.ibm.service.communication.eventbus;

import io.quarkus.vertx.ConsumeEvent;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GreetingService {

    @ConsumeEvent
    public String consume(String name) {
        return name.toUpperCase();
    }
}


1.@ConsumeEvent
  It has address, if not set, address is fully Qualified name of the name, for eg 
  com.ibm.service.communication.eventbus.GreetingService
  
2.String name
 The method parameter is message body, if the method returns something it's the  message response.

Note:
 By defaut, the code consuming event must be non-blocking, as it is called on the vertx event loop. if your processing is blocking, use blocking attribute

    @ConsumeEvent(blocking=true)
    public String consume(String name) {
        return name.toUpperCase();
    }


  or
    @ConsumeEvent() 
    @Blocking
    public String consume(String name) {
        return name.toUpperCase();
    }

Return Type of This Method

1.Mutiny Type -  Uni or Multi
2.CompletionStage

Configuring Address:
....................
   @ConsumeEvent("greeting")
    public String consume(String name) {
        return name.toUpperCase();
    }

Messages are received in the greeting address
.........
Replying:
   
  The return value of a method annotated with @ConsumeEvent is used as response to the incoming message. 
 
Return Async Message:
 
    @Inject
    ManagedExecutor executor;
    @ConsumeEvent("greeting")
    public Uni<String> consume(String name) {
        return Uni.createFrom().item(()->name.toUpperCase()).emitOn(executor);
    }
....................................................................................
		   Fire and Fogot Interactions- No Response
....................................................................................

Suppose you dont have to reply to received messages.Typicall, for a fire and fogot interaction, the messages are consumed and the sender does not need to know about it.
To implement this, method must return void.

    @ConsumeEvent("greeting")
    public void consume(String name) {
        //do something with event...
    }
.....................................................................................
		    Dealing Messges

Instead of reading only data , we can read many other informations

     @ConsumeEvent("greeting")
    public void consume(Message<String> message) {
        //do something with event...
    }
.....................................................................................
			Sending Message
.....................................................................................

How to Publish and send Messages

1.request/reply Pattern:
package com.ibm.service.communication.eventbus;

import io.quarkus.vertx.ConsumeEvent;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GreetingService {

    @ConsumeEvent("greeting")
    public String consume(String name) {
        return name.toUpperCase();
    }
}

package com.ibm.service.communication.eventbus;

import io.smallrye.mutiny.Uni;
import io.vertx.mutiny.core.eventbus.EventBus;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("async")
public class EventResource {
    @Inject
    EventBus eventBus;

    @GET
    @Path("{name}")
    public Uni<String> greeting(@PathParam("name") String name) {
        return eventBus.<String>request("greeting", name).onItem().transform(Message::body);
    }
}

Testing:
http://localhost:8080/async/subramanian

....................................................................................
			Fire and Forget Implementation
...................................................................................
package com.ibm.service.communication.eventbus;

import io.quarkus.vertx.ConsumeEvent;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class GreetingService {

    @ConsumeEvent("sink")
    public void process(Message<String> msg) {
        System.out.println("Address : " + msg.address());
        System.out.println("Body " + msg.body());
    }
}


package com.ibm.service.communication.eventbus;

import io.smallrye.mutiny.Uni;
import io.vertx.mutiny.core.eventbus.EventBus;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;

@Path("async")
public class EventResource {
    @Inject
    EventBus eventBus;

    @Path("fireandForget")
    @POST
    public void process(String payload) {
        eventBus.<String>requestAndForget("sink", payload);
    }

}
.....................................................................................
			Pub and Sub
.....................................................................................

One Producer, Multiple Subscribers
Messages to be delivered to more than one Subscribers.

package com.ibm.service.communication.eventbus;

import io.quarkus.vertx.ConsumeEvent;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class NotificationService {

    @ConsumeEvent("notification")
    public void subscriberOne(Message<String> message) {
        System.out.println("Subscriber One");
        System.out.println(message.address() + " " + message.body());
    }

    @ConsumeEvent("notification")
    public void subscriberTwo(Message<String> message) {
        System.out.println("Subscriber Two");
        System.out.println(message.address() + " " + message.body());

    }

    @ConsumeEvent("notification")
    public void subscriberThree(Message<String> message) {
        System.out.println("Subscriber Three");
        System.out.println(message.address() + " " + message.body());

    }
}

package com.ibm.service.communication.eventbus;

import io.quarkus.vertx.ConsumeEvent;
import io.vertx.mutiny.core.eventbus.Message;
import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class NotificationService {

    @ConsumeEvent("notification")
    public void subscriberOne(Message<String> message) {
        System.out.println("Subscriber One");
        System.out.println(message.address() + " " + message.body());
    }

    @ConsumeEvent("notification")
    public void subscriberTwo(Message<String> message) {
        System.out.println("Subscriber Two");
        System.out.println(message.address() + " " + message.body());

    }

    @ConsumeEvent("notification")
    public void subscriberThree(Message<String> message) {
        System.out.println("Subscriber Three");
        System.out.println(message.address() + " " + message.body());

    }
}
.....................................................................................
		  Messaging Patterns and Event Driven Microservices
.....................................................................................

Event Driven Microservices are very usefull in many use cases.

1.Distributed Database Transactions.

Messaging Patterns Lead other Event Driven Design patterns

1.Event Sourcing and Domain Event:
..................................

Context:
A service command typically needs to create/update/delete aggregates in the database and send messages/events to a message broker. 

Service Command:
  Service methods 

Service Methods:

1.Read - SELECT
2.Write- INSERT,UPDATE,DELETE

aggregates:
 Object - Entity

For Eg:
 You have OrderService, which has commands
  saveOrder
  updateOrder 
  deleteOrder
These commands will perform database operations.

Once database operations are over, we need to send/publish event into "Message Brokers (Kafka,RabbitMQ)"

Domain Event:
  It is similar to Event Sourcing Design pattern only but it depends on the "Domain Driven Design"

......................................................................................		   Domain Event and Event Sourcing Design Pattern
			      Implementation
		   (SmallRye Reactive Messaging Specification)
.....................................................................................

In spring we have Spring Cloud Stream..

SmallRye Reactive Messaging Specification:
..........................................
SmallRye Reactive Messaging is a framework for building event-driven, data streaming, and event-sourcing applications using CDI.

 It lets your application interaction using various messaging technologies such as Apache Kafka, AMQP or MQTT. The framework provides a flexible programming model bridging CDI and event-driven.


Our Implementation Could be Apache Kafka:
..........................................

Apache Kafka is a popular open-source distributed event streaming platform. It is used commonly for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications. Similar to a message queue, or an enterprise messaging platform, it lets you:


1.publish (write) and subscribe to (read) streams of events, called records.

2.store streams of records durably and reliably inside topics.

3.process streams of records as they occur or retrospectively.

Core Concepts of SmallRye Messaging:
....................................

1.Message:
..........
Applications send and receive messages. A message wraps a payload and can be extended with some metadata. With the Kafka connector, a message corresponds to a Kafka record.


2.Channels:
 Messages transit on channels. Application components connect to channels to publish and consume messages. The Kafka connector maps channels to Kafka topics.

3.Connectors:
  Channels are connected to message backends using connectors.
Connectors are configured to map incoming messages to a specific channel (consumed by the application) and collect outgoing messages sent to a specific channel. Each connector is dedicated to a specific messaging technology. For example, the connector dealing with Kafka is named smallrye-kafka.

Annotations;

org.eclipse.microprofile.reactive.messaging.Incoming - indicates the consumed channel

org.eclipse.microprofile.reactive.messaging.Outgoing - indicates the populated channel
.....................................................................................
Qurakus Kafka Configuration:
...........................
application.properties

%prod.kafka.bootstrap.servers=kafka:9092 
mp.messaging.incoming.prices.connector=smallrye-kafka 
	

mp.messaging.incoming.$channel.connector=smallrye-kafka 

if you are using dev services for kakfa , the above configuration is not necessary.
...................................................................................
			  Receiving Messages from the Kafka
...................................................................................


1.Listener Pattern:
 Just declare method inside class , declare that method as listener... and read messages.


import org.eclipse.microprofile.reactive.messaging.Incoming;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class PriceConsumer {

    @Incoming("prices")
    public void consume(double price) {
        // process your price.
    }

}

Different ways of consuming messages:
.....................................

@Incoming("prices")
public CompletionStage<Void> consume(Message<Double> msg) {
    // access record metadata
    var metadata = msg.getMetadata(IncomingKafkaRecordMetadata.class).orElseThrow();
    // process the message payload.
    double price = msg.getPayload();
    // Acknowledge the incoming message (commit the offset)
    return msg.ack();
}
Kafka stores data as records:
if you want to access Kafka Records directly...

@Incoming("prices")
public void consume(ConsumerRecord<String, Double> record) {
    String key = record.key(); // Can be `null` if the incoming record has no key
    String value = record.value(); // Can be `null` if the incoming record has no value
    String topic = record.topic();
    int partition = record.partition();
    // ...
}

or 

@Incoming("prices")
public void consume(ConsumerRecord<String, Double> record) {
    String key = record.key(); // Can be `null` if the incoming record has no key
    String value = record.value(); // Can be `null` if the incoming record has no value
    String topic = record.topic();
    int partition = record.partition();
    // ...
}

2.Dependency Injection Pattern:

 Channels can be injected into class and we can read messages...

import io.smallrye.mutiny.Multi;
import org.eclipse.microprofile.reactive.messaging.Channel;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.jboss.resteasy.reactive.RestStreamElementType;

@Path("/prices")
public class PriceResource {

    @Inject
    @Channel("prices")
    Multi<Double> prices;

    @GET
    @RestStreamElementType(MediaType.TEXT_PLAIN)
    public Multi<Double> stream() {
        return prices;
    }
}

@Inject @Channel("prices") Multi<Double> streamOfPayloads;

@Inject @Channel("prices") Multi<Message<Double>> streamOfMessages;

@Inject @Channel("prices") Publisher<Double> publisherOfPayloads;

@Inject @Channel("prices") Publisher<Message<Double>> publisherOfMessages;
.....................................................................................
			 Sending Messages To Kafka
.....................................................................................

Configuration :

%prod.kafka.bootstrap.servers=kafka:9092 
mp.messaging.outgoing.prices-out.connector=smallrye-kafka 
mp.messaging.outgoing.prices-out.topic=prices 

prices-out - channel Name where we publish Records/Messages.

How to map out going channal.

import io.smallrye.mutiny.Multi;
import org.eclipse.microprofile.reactive.messaging.Outgoing;

import jakarta.enterprise.context.ApplicationScoped;
import java.time.Duration;
import java.util.Random;

@ApplicationScoped
public class KafkaPriceProducer {

    private final Random random = new Random();

    @Outgoing("prices-out")
    public Multi<Double> generate() {
        // Build an infinite stream of random prices
        // It emits a price every second
        return Multi.createFrom().ticks().every(Duration.ofSeconds(1))
            .map(x -> random.nextDouble());
    }

}

Note:
  You should not call methods annotated with @Incoming and @Outgoing directly from   your   code.

Note that the generate method returns a Multi<Double>, which implements the Reactive Streams Publisher interface. This publisher will be used by the framework to generate messages and send them to the configured Kafka topic.

Different Syntax:
@Outgoing("out")
public Multi<Record<String, Double>> generate() {
    return Multi.createFrom().ticks().every(Duration.ofSeconds(1))
        .map(x -> Record.of("my-key", random.nextDouble()));
}

@Outgoing("generated-price")
public Multi<Message<Double>> generate() {
    return Multi.createFrom().ticks().every(Duration.ofSeconds(1))
            .map(x -> Message.of(random.nextDouble())
                    .addMetadata(OutgoingKafkaRecordMetadata.<String>builder()
                            .withKey("my-key")
                            .withTopic("my-key-prices")
                            .withHeaders(new RecordHeaders().add("my-header", "value".getBytes()))
                            .build()));
}
...................................................................................
			How to push messages from the Rest api
....................................................................................

@Emitter
Sending messages with @Emitter:

Sometimes, you need to have an imperative way of sending messages.

For example, if you need to send a message to a stream when receiving a POST request inside a REST endpoint. In this case, you cannot use @Outgoing because your method has parameters.

For this, you can use an Emitter.

import org.eclipse.microprofile.reactive.messaging.Channel;
import org.eclipse.microprofile.reactive.messaging.Emitter;

import jakarta.inject.Inject;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.core.MediaType;

@Path("/prices")
public class PriceResource {

    @Inject
    @Channel("price-create")
    Emitter<Double> priceEmitter;

    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    public void addPrice(Double price) {
        CompletionStage<Void> ack = priceEmitter.send(price);
    }
}
....................................................................................

How to send Message with ack?

import org.eclipse.microprofile.reactive.messaging.Channel;

import jakarta.inject.Inject;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.core.MediaType;

import io.smallrye.reactive.messaging.MutinyEmitter;

@Path("/prices")
public class PriceResource {

    @Inject
    @Channel("price-create")
    MutinyEmitter<Double> priceEmitter;

    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    public Uni<String> addPrice(Double price) {
        return quoteRequestEmitter.send(price)
                .map(x -> "ok")
                .onFailure().recoverWithItem("ko");
    }
}
....................................................................................

Implmentation:

YOu can use kafka as dev service or You can use separate kafka as well.

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-reactive-messaging</artifactId>
    </dependency>
   <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>
    </dependency>


application.properties
mp.messaging.incoming.words-in.topic=words
mp.messaging.outgoing.words-out.topic=words
mp.messaging.incoming.words-in.auto.offset.reset=earliest
#
mp.messaging.incoming.prices-in.topic=prices
mp.messaging.outgoing.prices-out.topic=prices
mp.messaging.incoming.prices-in.auto.offset.reset=earliest
mp.messaging.outgoing.prices-out.merge=true

package org.acme;

import io.smallrye.mutiny.Multi;
import jakarta.enterprise.context.ApplicationScoped;
import org.eclipse.microprofile.reactive.messaging.Incoming;
import org.eclipse.microprofile.reactive.messaging.Outgoing;

import java.time.Duration;
import java.util.Random;

@ApplicationScoped
public class PriceConsumer {

    private final Random random = new Random();

    @Incoming("prices-in")
    public void consume(double price) {
        System.out.println("Got From Kafka " + price);
    }

    //publish prices every
    @Outgoing("prices-out")
    public Multi<Double> generate() {
        // Build an infinite stream of random prices
        // It emits a price every second
        return Multi.createFrom().ticks().every(Duration.ofSeconds(1))
                .map(x -> random.nextDouble());
    }

}
package org.acme;

import jakarta.inject.Inject;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.MediaType;
import org.eclipse.microprofile.reactive.messaging.Channel;
import org.eclipse.microprofile.reactive.messaging.Emitter;

import javax.print.attribute.standard.Media;
import java.util.concurrent.CompletionStage;

@Path("prices")
public class PriceResource {

    @Inject
    @Channel("prices-out")
    Emitter<Double> priceEmiter;

    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    public String addPrice(Double price) {
        CompletionStage<Void> ack = priceEmiter.send(price);
        return "Published";
    }
}
.....................................................................................

